<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on Sensr.net Blog | Watch your Stuff!</title>
    <link>http://blog.sensr.net/tags/api/</link>
    <description>Recent content in Api on Sensr.net Blog | Watch your Stuff!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Aug 2011 18:40:21 +0000</lastBuildDate>
    <atom:link href="http://blog.sensr.net/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Upload Images to Sensr.net</title>
      <link>http://blog.sensr.net/2011/08/01/how-to-upload-images-to-sensr/</link>
      <pubDate>Mon, 01 Aug 2011 18:40:21 +0000</pubDate>
      
      <guid>http://blog.sensr.net/2011/08/01/how-to-upload-images-to-sensr/</guid>
      <description>

&lt;div class=&#34;share_buttons_simple_use_buttons&#34; style=&#34;padding: 10px 0; display: inline-block&#34;&gt;
  &lt;div class=&#34;tweet_button&#34; style=&#34;float: left; vertical-align: top&#34;&gt;
    &lt;a href=&#34;http://twitter.com/share&#34; class=&#34;twitter-share-button&#34; data-url=&#34;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#34; data-text=&#34;How to Upload Images to Sensr.net&#34; data-count=&#34;none&#34;&gt;Tweet&lt;/a&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;div class=&#34;facebook_like_button&#34; style=&#34;float: left; vertical-align: top; margin-left: 10px; max-width: 255px&#34;&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Sensr.net&amp;#8217;s server architecture is organized into two main parts.  There are &amp;#8220;Front-End&amp;#8221; webservers that handle browser and API requests and a large number of &amp;#8220;Back-End&amp;#8221; Camera processors that are dedicated to receiving images through a variety of mechanisms including&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FTP Image Upload,&lt;/li&gt;
&lt;li&gt;HTTP Image Upload, and&lt;/li&gt;
&lt;li&gt;HTTP MJPEG Stream Push.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#8217;re a developer, it may help you to think of &lt;a href=&#34;http://sensr.net&#34;&gt;Sensr.net&lt;/a&gt; as a service that allocates inexpensive FTP accounts optimized for image uploading, with a front-end for viewing, cataloging and sharing these images.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.sensr.net/wp-content/uploads/2011/07/fx_arch1.png&#34;&gt;&lt;img class=&#34;size-full wp-image-475&#34; title=&#34;fx_arch1&#34; src=&#34;http://blog.sensr.net/wp-content/uploads/2011/07/fx_arch1.png&#34; alt=&#34;Sensr.net Architecture&#34; width=&#34;475&#34; height=&#34;285&#34; srcset=&#34;http://sensr.net/blog/wp-content/uploads/2011/07/fx_arch1.png 475w, http://sensr.net/blog/wp-content/uploads/2011/07/fx_arch1-300x180.png 300w&#34; sizes=&#34;(max-width: 475px) 100vw, 475px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The front-end and back-end implement different authorization mechanisms.  The front-end authenticates a Sensr User with their email and a password.  The back-ends have separate logins for each Camera.  The front-end can allocate and view logins on the back-ends, but not vice-versa.&lt;/p&gt;

&lt;p&gt;Every time you create a new camera using the web interface, Sensr.net allocates a new login on a back-end processor.  A Sensr.net user may have many cameras, each having their own upload account.  These accounts are not very powerful: they only allow uploading images to a back-end host through FTP and HTTP.  (In other words, you can&amp;#8217;t login to the front-end Sensr website with them.)  This is a good thing:  if you want to embed these logins in code on cameras and servers you don&amp;#8217;t need to worry about someone being able to do something malicious with them.&lt;/p&gt;

&lt;p&gt;The back-end FTP login is what you see on the &amp;#8220;Create New Camera&amp;#8221; page.  Three pieces of information identify a back-end login.  These are the HOST name (or FTP Server), the USERNAME and the PASSWORD.  The back-end login credentials for a camera can also be observed by opening up the &amp;#8220;Settings&amp;#8221; control of your camera.&lt;/p&gt;

&lt;p&gt;Using the API, you can retrieve the back-end login creditials by retrieving the camera object.  If you are the owner of the camera, you will find these in the JSON representation of your camera object.  Here is an example:&lt;/p&gt;

&lt;pre&gt;{ &#34;name&#34;:&#34;Front-Door Camera&#34;,
    ...,
    &#34;host&#34;:&#34;f7.sensr.net&#34;,
    &#34;username&#34;:&#34;cam28&#34;,
    &#34;password&#34;:&#34;l4hqpy0ywm&#34;,
    ... }&lt;/pre&gt;

&lt;h2 id=&#34;uploading-using-ftp:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;Uploading using FTP&lt;/h2&gt;

&lt;p&gt;FTP Upload is the method Sensr.net recommends for most of the Netcams currently available.  When configuring a camera, you set the HOST, USERNAME and PASSWORD to the credentials obtained from the Sensr website.  For each frame, a netcam creates a JPG file and issues an FTP PUT command to transfer it to your Sensr.net upload host.&lt;/p&gt;

&lt;p&gt;Commercially available Netcams vary widely in their capabilities, but there are a few guidelines that can help.  These guidelines apply to FTP upload applications you may be writing as a developer too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You must use PASV (passive) FTP mode.&lt;/li&gt;
&lt;li&gt;Your upload file should be written to the &amp;#8220;/&amp;#8221; (root) directory if possible.  Do not give the upload directory a name like &amp;#8220;/MyCamera/&amp;#8221;.&lt;/li&gt;
&lt;li&gt;If possible, give each uploaded file a unique name.  Appending a timestamp included in the uploaded file name is great.  Use something like &amp;#8220;/SensrCam2010102011073001.jpg&amp;#8221; for your uploaded image names if possible.  (An increment number can suffice instead of a timestamp.)  This helps avoid race conditions on the server.&lt;/li&gt;
&lt;li&gt;Avoid FTP commands that rename or move files around on the server. (Some cameras like the Panasonic BL-C140A &amp;#8211; when in &amp;#8220;overwrite&amp;#8221; mode &amp;#8211; attempt to rename files from &amp;#8220;imagenew.jpg&amp;#8221; to &amp;#8220;imageold.jpg&amp;#8221; in an effort to maintain a buffered image.  This technique causes errors.)&lt;/li&gt;
&lt;li&gt;Re-use the FTP connection for successive image uploads if possible.  The camera-upload program EvoCam has a &amp;#8220;Stay Connected&amp;#8221; option, for example.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ftp-a-linux-example:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;FTP: A Linux Example&lt;/h3&gt;

&lt;p&gt;You can experiment with FTP upload by building your own FTP-based &amp;#8220;Netcam&amp;#8221; on a Linux machine by using an external webcam, the program ffmpeg and a our shell script. After allocating a new camera on Sensr.net, you should gather the HOST, USERNAME and PASSWORD parameters and hard-code them into your copy of the script.&lt;/p&gt;

&lt;p&gt;The script uses dov4l to set image capture parameters for the webcam.  The script then enters a loop where it uses ffmpeg to grab several frames from the camera and save them as JPG files.  One of these frames is selected for upload by FTP, and then the loop repeats.  You can interrupt the script by hitting `^C`.&lt;/p&gt;

&lt;h2 id=&#34;uploading-using-http:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;Uploading using HTTP&lt;/h2&gt;

&lt;p&gt;HTTP Uploading avoids many problems that occur with the FTP Upload method.  First and foremost: HTTP gets through firewalls and proxies better than FTP.  Some cameras, like the [Axis M1011 Network Camera][3] support HTTP upload directly.  If you&amp;#8217;re a programmer creating an App on a mobile device like an iPhone or Android, there are simple ways to upload JPGs using HTTP in the appropriate SDK. HTTP Upload is a very simple protocol.  There is a single connection and the request contains all of the upload information.  FTP in contrast, opens and closes TCP connections, uses multiple ports, offers passive and active variants, and has pitfalls related to file naming.&lt;/p&gt;

&lt;p&gt;Sensr.net&amp;#8217;s HTTP Upload protocol implements Basic Authentication with the same USERNAME and PASSWORD credentials as the FTP Upload option.  The single-photo upload URL for your HOST, USERNAME, PASSWORD credentials shown below.  Notice how the USERNAME parameter occurs twice: it is the name of the account and also identifies the camera.&lt;/p&gt;

&lt;pre&gt;http://${USERNAME}:${PASSWORD}@${HOST}/photo/${USERNAME}&lt;/pre&gt;

&lt;p&gt;Sensr.net&amp;#8217;s HTTP Basic Authentication requires the &amp;#8220;Authorization:&amp;#8221; header in the request.  A challenge will be returned to the client if the header is not present and it is not valid.  (See &lt;a title=&#34;Basic Access Authentication&#34; href=&#34;http://en.wikipedia.org/wiki/Basic_access_authentication&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Basic_access_authentication&#34;&gt;http://en.wikipedia.org/wiki/Basic_access_authentication&lt;/a&gt;&lt;/a&gt; for an overview of this method.)&lt;/p&gt;

&lt;h3 id=&#34;http-request-in-detail:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;HTTP Request in Detail&lt;/h3&gt;

&lt;p&gt;A full HTTP request with authentication information is shown below.  The body of the request is the binary data of the uploaded JPEG image.  JPEG files begin with the bytes 0xFF, 0xD8 and end with the bytes 0xFF, 0xD9.&lt;/p&gt;

&lt;pre&gt;POST /photo/cam28 HTTP/1.0
User-Agent: Wget/1.11.4
Accept: */*
Authorization: Basic Y2FtMTE6d2x6bzNwaGgxZQ==
Host: localhost:3000
Connection: Keep-Alive
Content-Type: image/jpeg
Content-Length: 484881

&amp;lt;FF&amp;gt;&amp;lt;D8&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;E0&amp;gt;^@^PJFIF^@^A^A^@^@^A^@^A^@^@
...
...
^NNh&amp;lt;A3&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;D9&amp;gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;http-status-codes:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;HTTP Status Codes&lt;/h3&gt;

&lt;p&gt;An HTTP Photo request will return one of the following status codes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;200 &amp;#8211; OK.  Upload stucceeded.&lt;/li&gt;
&lt;li&gt;404 &amp;#8211; Not found.  Camera name does not exist.&lt;/li&gt;
&lt;li&gt;401 &amp;#8211; Unauthorized.  Password does not match camera.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h3 id=&#34;http-a-linux-example:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;HTTP: A Linux Example&lt;/h3&gt;

&lt;p&gt;You can upload images from your computer to a Sensr.net camera using command line tools curl and wget.  The examples below show how to upload a single image called &amp;#8220;Rocketship.jpg&amp;#8221; to cam28. The &lt;a href=&#34;http://curl.haxx.se/docs/manpage.html&#34; target=&#34;_blank&#34;&gt;curl&lt;/a&gt; program accepts the USERNAME and PASSWORD as part of the upload URL.  By placing the authorization parameters in the URL, curl includes the Basic Authorization headers in the request.   The other parameters that we need to give are the upload filename and the Content-Type header.&lt;/p&gt;

&lt;pre&gt;curl -T Rocketship.jpg -H &#34;Content-Type: image/jpeg&#34; http://cam28:lfhapy07wm@f7.sensr.net/photo/cam28&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.gnu.org/software/wget/manual/wget.html&#34; target=&#34;_blank&#34;&gt;wget&lt;/a&gt; program requires that the USERNAME and PASSWORD are given as separate command line arguments.   Wget differs from curl in that it does not present the authorization headers until it receives a challenge from the server.  We can override this behavior by including the &amp;#8220;&amp;#8211;auth-no-challenge&amp;#8221; flag so that wget puts the &amp;#8220;Authorization:&amp;#8221; header in the request on the first go-around.&lt;/p&gt;

&lt;pre&gt;wget --auth-no-challenge --user=cam28 --password=l4hqpy0ywm  --post-file=Rocketship.jpg --header &#34;Content-Type: image/jpeg&#34; http://f7.sensr.net/photo/cam28&lt;/pre&gt;

&lt;h2 id=&#34;streaming-upload-using-http-and-mjpeg:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;Streaming Upload using HTTP and MJPEG&lt;/h2&gt;

&lt;p&gt;Motion-JPEG (MJPEG) is a simple video format that consists of a stream of JPEG images, one after another.  MJPEG does not include time-code information.  Sensr accepts MJPEG Upload streams over HTTP.   Streaming uploads require HTTP Basic Authorization just the same as Sensr.net&amp;#8217;s Photo uploads:&lt;/p&gt;

&lt;pre&gt;http://${USERNAME}:${PASSWORD}@${HOST}/upload/${USERNAME}&lt;/pre&gt;

&lt;p&gt;MJPEG upload is very similar to the HTTP Photo upload method described earlier, but instead of the request body consisting of a single JPEG image, the request body contains a sequence of JPEG frames.  As Sensr reads the request body through an Internet Socket, it splits the body into frames as each JPEG image is detected.  The Sensr timestamp of the arriving image is the time at which Sensr processes that portion of the request. JPEG files begin with the bytes 0xFF, 0xD8 and end with the bytes 0xFF, xD9.  An MJPEG streaming upload request looks something like the following.&lt;/p&gt;

&lt;pre&gt;POST /upload/cam28 HTTP/1.0
User-Agent: Wget/1.11.4
Accept: */*
Authorization: Basic Y2FtMTE6d2x6bzNwaGgxZQ==

&amp;lt;FF&amp;gt;&amp;lt;D8&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;E0&amp;gt;^@^PJFIF^@^A^A^@^@^A^@^A^@^@
...
...
^NNh&amp;lt;A3&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;D9&amp;gt;
&amp;lt;FF&amp;gt;&amp;lt;D8&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;E0&amp;gt;^@^PJFIF^@^B^B^@^@^B^@^B^@^@
...
...
^NNh&amp;lt;A3&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;D9&amp;gt;
&amp;lt;FF&amp;gt;&amp;lt;D8&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;E0&amp;gt;^@^PJFIF^@^C^C^@^@^C^@^C^@^@
...
...
^NNh&amp;lt;A3&amp;gt;&amp;lt;FF&amp;gt;&amp;lt;D9&amp;gt;&lt;/pre&gt;

&lt;p&gt;Streams uploaded this way can keep connections open for a very long time.&lt;/p&gt;

&lt;h3 id=&#34;mjpeg-a-linux-example:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;MJPEG: a Linux Example&lt;/h3&gt;

&lt;p&gt;You can experiment with HTTP MJPEG streaming uploads on your Linux computer with the ever-versatile ffmpeg and an external webcam.  The ffmpeg program knows about MJPEG URLs, making uploading trivial.  Use the script below and customize it with your own USERNAME and PASSWORD to upload streams to Sensr.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:e839ecf4ba58c2bda474de5a919e9283&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Sensr.net is a versatile upload service for JPEG images from all kinds of image sources.  The examples here show just how simple image upload clients can be.  If you are a developer, perhaps some of the resources shown here will inspire you use Sensr.net as an image repository for your own projects.&lt;/p&gt;

&lt;div class=&#34;trackable_sharing&#34;&gt;
  &lt;a href=&#34;http://www.facebook.com/sharer.php?u=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&#34; style=&#34;text-decoration: none; white-space: nowrap;&#34; title=&#34;Facebook&#34; target=&#34;_blank&#34; onclick=&#34;that=this;_gaq.push([&#39;_trackEvent&#39;,&#39;SocialSharing&#39;,&#39;Facebook&#39;,&#39;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#39;]); _trackableshare_window = window.open(this.href,&#39;share&#39;,&#39;menubar=0,resizable=1,width=500,height=350&#39;); _trackableshare_window.focus(); return false;&#34;&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;http://sensr.net/blog/wp-content/plugins/trackable-social-share-icons/buttons/f4//facebook.png&#34; alt=&#34;Facebook&#34; width=&#34;0&#34; height=&#34;0&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://twitter.com/share?url=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&amp;text=How+to+Upload+Images+to+Sensr.net&#34; style=&#34;text-decoration: none; white-space: nowrap;&#34; title=&#34;Twitter&#34; target=&#34;_blank&#34; onclick=&#34;that=this;_gaq.push([&#39;_trackEvent&#39;,&#39;SocialSharing&#39;,&#39;Twitter&#39;,&#39;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#39;]); _trackableshare_window = window.open(this.href,&#39;share&#39;,&#39;menubar=0,resizable=1,width=500,height=350&#39;); _trackableshare_window.focus(); return false;&#34;&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;http://sensr.net/blog/wp-content/plugins/trackable-social-share-icons/buttons/f4//twitter.png&#34; alt=&#34;Twitter&#34; width=&#34;0&#34; height=&#34;0&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.reddit.com/login?dest=%2Fsubmit%3Furl=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&amp;title=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&#34; style=&#34;text-decoration: none; white-space: nowrap;&#34; title=&#34;Reddit&#34; target=&#34;_blank&#34; onclick=&#34;that=this;_gaq.push([&#39;_trackEvent&#39;,&#39;SocialSharing&#39;,&#39;Reddit&#39;,&#39;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#39;]); _trackableshare_window = window.open(this.href,&#39;share&#39;,&#39;menubar=0,resizable=1,width=700,height=500&#39;); _trackableshare_window.focus(); return false;&#34;&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;http://sensr.net/blog/wp-content/plugins/trackable-social-share-icons/buttons/f4//reddit.png&#34; alt=&#34;Reddit&#34; width=&#34;0&#34; height=&#34;0&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://digg.com/submit?partner=addthis&amp;url=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&amp;title=How+to+Upload+Images+to+Sensr.net&amp;bodytext=&#34; style=&#34;text-decoration: none; white-space: nowrap;&#34; title=&#34;Digg&#34; target=&#34;_blank&#34; onclick=&#34;that=this;_gaq.push([&#39;_trackEvent&#39;,&#39;SocialSharing&#39;,&#39;Digg&#39;,&#39;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#39;]); _trackableshare_window = window.open(this.href,&#39;share&#39;,&#39;menubar=0,resizable=1,width=750,height=450&#39;); _trackableshare_window.focus(); return false;&#34;&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;http://sensr.net/blog/wp-content/plugins/trackable-social-share-icons/buttons/f4//digg.png&#34; alt=&#34;Digg&#34; width=&#34;0&#34; height=&#34;0&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;http://www.stumbleupon.com/submit?url=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&amp;title=http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&#34; style=&#34;text-decoration: none; white-space: nowrap;&#34; title=&#34;Stumbleupon&#34; target=&#34;_blank&#34; onclick=&#34;that=this;_gaq.push([&#39;_trackEvent&#39;,&#39;SocialSharing&#39;,&#39;Stumbleupon&#39;,&#39;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#39;]); _trackableshare_window = window.open(this.href,&#39;share&#39;,&#39;menubar=0,resizable=1,width=750,height=450&#39;); _trackableshare_window.focus(); return false;&#34;&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;http://sensr.net/blog/wp-content/plugins/trackable-social-share-icons/buttons/f4//stumbleupon.png&#34; alt=&#34;Stumbleupon&#34; width=&#34;0&#34; height=&#34;0&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;mailto:?subject=Check out http%3A%2F%2Fec2-35-161-252-137.us-west-2.compute.amazonaws.com%2F2011%2F08%2F01%2Fhow-to-upload-images-to-sensr%2F&#34; style=&#34;text-decoration: none; white-space: nowrap;&#34; title=&#34;Email&#34; onclick=&#34;that=this;_gaq.push([&#39;_trackEvent&#39;,&#39;SocialSharing&#39;,&#39;Email&#39;,&#39;http://ec2-35-161-252-137.us-west-2.compute.amazonaws.com/2011/08/01/how-to-upload-images-to-sensr/&#39;]); &#34;&gt;&lt;img align=&#34;absmiddle&#34; src=&#34;http://sensr.net/blog/wp-content/plugins/trackable-social-share-icons/buttons/f4//email.png&#34; alt=&#34;Email&#34; width=&#34;0&#34; height=&#34;0&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;[3]: &lt;a href=&#34;http://blog.sensr.net/2011/06/24/axis-m1011-firmware-upgrade-for-http-upload/&#34;&gt;http://blog.sensr.net/2011/06/24/axis-m1011-firmware-upgrade-for-http-upload/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>